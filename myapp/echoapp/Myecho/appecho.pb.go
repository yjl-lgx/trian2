// Code generated by protoc-gen-go. DO NOT EDIT.
// source: appecho.proto

/*
Package echoapp is a generated protocol buffer package.

It is generated from these files:
	appecho.proto

It has these top-level messages:
	TimeResponse
	MyInfoResponse
*/
package echoapp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TimeResponse struct {
	Ti string `protobuf:"bytes,1,opt,name=ti" json:"ti,omitempty"`
}

func (m *TimeResponse) Reset()                    { *m = TimeResponse{} }
func (m *TimeResponse) String() string            { return proto.CompactTextString(m) }
func (*TimeResponse) ProtoMessage()               {}
func (*TimeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TimeResponse) GetTi() string {
	if m != nil {
		return m.Ti
	}
	return ""
}

type MyInfoResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *MyInfoResponse) Reset()                    { *m = MyInfoResponse{} }
func (m *MyInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*MyInfoResponse) ProtoMessage()               {}
func (*MyInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MyInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*TimeResponse)(nil), "echoapp.TimeResponse")
	proto.RegisterType((*MyInfoResponse)(nil), "echoapp.MyInfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Data service

type DataClient interface {
	GetInfo(ctx context.Context, opts ...grpc.CallOption) (Data_GetInfoClient, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetInfo(ctx context.Context, opts ...grpc.CallOption) (Data_GetInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Data_serviceDesc.Streams[0], c.cc, "/echoapp.Data/GetInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataGetInfoClient{stream}
	return x, nil
}

type Data_GetInfoClient interface {
	Send(*MyInfoResponse) error
	Recv() (*MyInfoResponse, error)
	grpc.ClientStream
}

type dataGetInfoClient struct {
	grpc.ClientStream
}

func (x *dataGetInfoClient) Send(m *MyInfoResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataGetInfoClient) Recv() (*MyInfoResponse, error) {
	m := new(MyInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Data service

type DataServer interface {
	GetInfo(Data_GetInfoServer) error
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_GetInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).GetInfo(&dataGetInfoServer{stream})
}

type Data_GetInfoServer interface {
	Send(*MyInfoResponse) error
	Recv() (*MyInfoResponse, error)
	grpc.ServerStream
}

type dataGetInfoServer struct {
	grpc.ServerStream
}

func (x *dataGetInfoServer) Send(m *MyInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataGetInfoServer) Recv() (*MyInfoResponse, error) {
	m := new(MyInfoResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echoapp.Data",
	HandlerType: (*DataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInfo",
			Handler:       _Data_GetInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "appecho.proto",
}

// Client API for TimeData service

type TimeDataClient interface {
	TimePush(ctx context.Context, opts ...grpc.CallOption) (TimeData_TimePushClient, error)
}

type timeDataClient struct {
	cc *grpc.ClientConn
}

func NewTimeDataClient(cc *grpc.ClientConn) TimeDataClient {
	return &timeDataClient{cc}
}

func (c *timeDataClient) TimePush(ctx context.Context, opts ...grpc.CallOption) (TimeData_TimePushClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TimeData_serviceDesc.Streams[0], c.cc, "/echoapp.TimeData/TimePush", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeDataTimePushClient{stream}
	return x, nil
}

type TimeData_TimePushClient interface {
	Send(*TimeResponse) error
	Recv() (*TimeResponse, error)
	grpc.ClientStream
}

type timeDataTimePushClient struct {
	grpc.ClientStream
}

func (x *timeDataTimePushClient) Send(m *TimeResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeDataTimePushClient) Recv() (*TimeResponse, error) {
	m := new(TimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TimeData service

type TimeDataServer interface {
	TimePush(TimeData_TimePushServer) error
}

func RegisterTimeDataServer(s *grpc.Server, srv TimeDataServer) {
	s.RegisterService(&_TimeData_serviceDesc, srv)
}

func _TimeData_TimePush_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeDataServer).TimePush(&timeDataTimePushServer{stream})
}

type TimeData_TimePushServer interface {
	Send(*TimeResponse) error
	Recv() (*TimeResponse, error)
	grpc.ServerStream
}

type timeDataTimePushServer struct {
	grpc.ServerStream
}

func (x *timeDataTimePushServer) Send(m *TimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *timeDataTimePushServer) Recv() (*TimeResponse, error) {
	m := new(TimeResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TimeData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echoapp.TimeData",
	HandlerType: (*TimeDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TimePush",
			Handler:       _TimeData_TimePush_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "appecho.proto",
}

func init() { proto.RegisterFile("appecho.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2c, 0x28, 0x48,
	0x4d, 0xce, 0xc8, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x07, 0xb1, 0x13, 0x0b, 0x0a,
	0x94, 0xe4, 0xb8, 0x78, 0x42, 0x32, 0x73, 0x53, 0x83, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0x85, 0xf8, 0xb8, 0x98, 0x4a, 0x32, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x4a, 0x32,
	0x95, 0x54, 0xb8, 0xf8, 0x7c, 0x2b, 0x3d, 0xf3, 0xd2, 0xf2, 0xe1, 0x2a, 0x84, 0xb8, 0x58, 0xf2,
	0x12, 0x73, 0x53, 0xa1, 0x6a, 0xc0, 0x6c, 0x23, 0x4f, 0x2e, 0x16, 0x97, 0xc4, 0x92, 0x44, 0x21,
	0x47, 0x2e, 0x76, 0xf7, 0xd4, 0x12, 0x90, 0x72, 0x21, 0x71, 0x3d, 0xa8, 0x15, 0x7a, 0xa8, 0xfa,
	0xa5, 0x70, 0x49, 0x28, 0x31, 0x68, 0x30, 0x1a, 0x30, 0x1a, 0x79, 0x71, 0x71, 0x80, 0x1c, 0x04,
	0x36, 0xce, 0x0e, 0xc2, 0x0e, 0x28, 0x2d, 0xce, 0x10, 0x12, 0x85, 0x6b, 0x43, 0x76, 0xaf, 0x14,
	0x76, 0x61, 0x88, 0x59, 0x49, 0x6c, 0x60, 0xcf, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfc,
	0x31, 0x49, 0x9c, 0xfd, 0x00, 0x00, 0x00,
}
